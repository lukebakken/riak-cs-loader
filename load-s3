#!/usr/bin/env bash

source ./lib/common.bash
check_s3cmd
set -o nounset

errfile=$(mktemp -t $0)
exec 3> $errfile

tempfoo=$(basename $0)
myfifodir=$(mktemp -d -t ${tempfoo})

function on_exit
{
  exec 3>&-
  exec 4>&-

  rm -rf $myfifodir
  if [[ -s $errfile ]]
  then
    mv -f $errfile load-s3.err
  else
    rm -f $errfile
  fi
}
trap on_exit EXIT

data_dir='./load-s3-data'
if [[ ! -d $data_dir ]]
then
  mkdir $data_dir
fi

start_time=$(date '+%Y-%m-%d_%H-%M-%S')
upload_log="$data_dir/${start_time}.log"

myfifo="$myfifodir/$tempfoo.fifo"
mkfifo -m 0700 "$myfifo"
exec 4<> "$myfifo" # hook pipe up to descriptor 4 for read/write

declare -i maximum=2 # max subprocesses at a time
declare -i running=0 # current running count

declare -i total_size=0
declare -i file_count=0
declare -i file_count_total=8

./s3cmd/s3cmd -c .s3cfg mb s3://test-bucket

while (( file_count < file_count_total ))
do
  while (( running >= maximum ))
  do
    declare -i cpid=0
    declare -i size=0
    if IFS='|' read -u 4 cpid size
    then
      (( total_size += size ))
      wait $cpid
      (( --running ))
    fi
  done

  (
    declare -i size=$(( (RANDOM * 256) + 1024 ))
    tmpfile="$(mktemp -t $0)"
    dd if=/dev/urandom bs=$size count=1 2>/dev/null | openssl enc -a > "$tmpfile"
    if [[ ! -s "$tmpfile" ]]
    then
      perr "zero-byte upload file: $tmpfile"
      rm -f "$tmpfile"
    else
      s3cmd_output="$(mktemp -t $0)"

      s3_file="s3://test-bucket/file-${file_count}.txt"
      ./s3cmd/s3cmd -c .s3cfg put "$tmpfile" "$s3_file" > "$s3cmd_output" 2>&1
      if [[ $? == 0 ]]
      then
        echo "$s3_file|$size" >> "$upload_log"
      else
        cat >&3 <<EOT
------------------------------------------------------------------------ 
ERROR $? in s3cmd -c .s3cfg put "$tmpfile" "$s3_file"
EOT
      cat < "$s3cmd_output" >&3
      cat >&3 <<EOT
------------------------------------------------------------------------ 
EOT
      fi
    fi
    rm -f "$tmpfile" "$s3cmd_output"
    echo "$BASHPID|$size" 1>&4
  ) &

  (( ++running ))
  (( ++file_count ))

done

wait

echo "$total_size" > "${upload_log}.total"

exit 0

